{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","tweetEl"],"mappings":"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","file":"static/js/main.b318b644.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\";\nimport { loadTweets } from \"../lookup\";\n\nexport function TweetsComponent(props) {\n  const textAreaRef = React.createRef();\n  const [newTweets, setNewTweets] = useState([]);\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const newVal = textAreaRef.current.value;\n    let tempNewTweets = [...newTweets];\n    // 서버에서 데이터 불러오는 방식으로 변경 예정\n    tempNewTweets.unshift({ content: newVal, likes: 0, id: 12312 });\n    setNewTweets(tempNewTweets);\n    textAreaRef.current.value = \"\";\n  };\n  return (\n    <div className={props.className}>\n      <div className=\"col-12\">\n        <form onSubmit={handleSubmit}>\n          <textarea\n            ref={textAreaRef}\n            required={true}\n            className=\"form-control\"\n          ></textarea>\n          <button type=\"submit\" className=\"btn btn-primary my-3\">\n            Tweet\n          </button>\n        </form>\n      </div>\n      <TweetsList newTweets={newTweets} />\n    </div>\n  );\n}\n\nexport function TweetsList(props) {\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  useEffect(() => {\n    let final = [...props.newTweets].concat(tweetsInit);\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      console.log(response, status);\n      if (status === 200) {\n        setTweetsInit(response);\n      } else {\n        alert(\"오류가 있습니다.\");\n      }\n    };\n    loadTweets(myCallback);\n  }, []);\n  return tweets.map((item, index) => {\n    return (\n      <Tweet\n        tweet={item}\n        className=\"my-5 py-5 border bg-white text-dark\"\n        key={`${index}-{item.id}`}\n      />\n    );\n  });\n}\n\nexport function ActionBtn(props) {\n  const { tweet, action } = props;\n  const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\n  const [userLike, setUserLike] = useState(\n    tweet.userLike === true ? true : false\n  );\n  const className = props.className\n    ? props.className\n    : \"btn btn-primary btn-sm\";\n  const actionDisplay = action.display ? action.display : \"Action\";\n  const handleClick = (event) => {\n    event.preventDefault();\n    if (action.type === \"like\") {\n      if (userLike === true) {\n        // perhaps i Unlike it?\n        setLikes(likes - 1);\n        setUserLike(false);\n      } else {\n        setLikes(likes + 1);\n        setUserLike(true);\n      }\n    }\n  };\n  const display =\n    action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay;\n  return (\n    <button onClick={handleClick} className={className}>\n      {display}\n    </button>\n  );\n}\n\nexport function Tweet(props) {\n  const { tweet } = props;\n  const className = props.className\n    ? props.className\n    : \"col-10 mx-auto col-md-6\";\n  return (\n    <div className={className}>\n      <p>\n        {tweet.id} - {tweet.content}\n      </p>\n      <div className=\"btn btn-group\">\n        <ActionBtn tweet={tweet} action={{ type: \"like\", display: \"Likes\" }} />\n        <ActionBtn\n          tweet={tweet}\n          action={{ type: \"unlike\", display: \"Unlike\" }}\n        />\n        <ActionBtn\n          tweet={tweet}\n          action={{ type: \"retweet\", display: \"Retweet\" }}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function loadTweets(callback) {\n    const xhr = new XMLHttpRequest() // xhr = SomeClass()\n    const method = 'GET' // \"POST\"\n    const url = 'http://localhost:8000/api/tweets/'\n    const responseType = 'json'\n    xhr.responseType = responseType\n    xhr.open(method, url) \n    xhr.onload = function() {\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function(e) {\n        console.log(e)\n        callback({'message':'해당 요청은 오류가 있습니다.'}, 400)\n    }\n    xhr.send()\n}","import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { TweetsComponent } from \"./tweets\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { TweetsComponent } from \"./tweets\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst appEl = document.getElementById(\"root\");\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\nconst tweetEl = document.getElementById(\"tweetme-2\");\nif (tweetEl) {\n  ReactDOM.render(<TweetsComponent />, tweetEl);\n}\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}